
DATKLL231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e00  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f40  08002f40  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002f40  08002f40  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f40  08002f40  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000060  08002fa8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08002fa8  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000900e  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3b  00000000  00000000  00029097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002b500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016752  00000000  00000000  0002be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa44  00000000  00000000  0004258a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082259  00000000  00000000  0004cfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a0  00000000  00000000  000cf27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08002ef8 	.word	0x08002ef8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08002ef8 	.word	0x08002ef8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <isButtonPressed>:
int normal_flag[NUM_OF_BUTTONS] = {0};
int long_flag[NUM_OF_BUTTONS] = {0};

int TimeOutForKeyPress[NUM_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if (normal_flag[index] == 1){
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <isButtonPressed+0x30>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d106      	bne.n	800095e <isButtonPressed+0x22>
		normal_flag[index] = 0;
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <isButtonPressed+0x30>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2100      	movs	r1, #0
 8000956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <isButtonPressed+0x24>
	}
	return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	2000007c 	.word	0x2000007c

08000970 <subKeyProcess>:

void subKeyProcess(int index){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	normal_flag[index] = 1;
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <subKeyProcess+0x1c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2101      	movs	r1, #1
 800097e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	2000007c 	.word	0x2000007c

08000990 <getKeyInput>:

void getKeyInput() {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	e0a9      	b.n	8000af0 <getKeyInput+0x160>
		KeyReg0[i] = KeyReg1[i];
 800099c:	4a59      	ldr	r2, [pc, #356]	; (8000b04 <getKeyInput+0x174>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a4:	4958      	ldr	r1, [pc, #352]	; (8000b08 <getKeyInput+0x178>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80009ac:	4a57      	ldr	r2, [pc, #348]	; (8000b0c <getKeyInput+0x17c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b4:	4953      	ldr	r1, [pc, #332]	; (8000b04 <getKeyInput+0x174>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Read signals from buttons
		if (i == 0) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10b      	bne.n	80009da <getKeyInput+0x4a>
			KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4852      	ldr	r0, [pc, #328]	; (8000b10 <getKeyInput+0x180>)
 80009c8:	f001 fa5e 	bl	8001e88 <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4a4e      	ldr	r2, [pc, #312]	; (8000b0c <getKeyInput+0x17c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009d8:	e01c      	b.n	8000a14 <getKeyInput+0x84>
		}
		else if (i == 1) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d10b      	bne.n	80009f8 <getKeyInput+0x68>
			KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80009e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e4:	484a      	ldr	r0, [pc, #296]	; (8000b10 <getKeyInput+0x180>)
 80009e6:	f001 fa4f 	bl	8001e88 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4619      	mov	r1, r3
 80009ee:	4a47      	ldr	r2, [pc, #284]	; (8000b0c <getKeyInput+0x17c>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009f6:	e00d      	b.n	8000a14 <getKeyInput+0x84>
		}
		else if (i == 2) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d10a      	bne.n	8000a14 <getKeyInput+0x84>
			KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80009fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a02:	4843      	ldr	r0, [pc, #268]	; (8000b10 <getKeyInput+0x180>)
 8000a04:	f001 fa40 	bl	8001e88 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4a3f      	ldr	r2, [pc, #252]	; (8000b0c <getKeyInput+0x17c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000a14:	4a3b      	ldr	r2, [pc, #236]	; (8000b04 <getKeyInput+0x174>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a1c:	493a      	ldr	r1, [pc, #232]	; (8000b08 <getKeyInput+0x178>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d159      	bne.n	8000adc <getKeyInput+0x14c>
 8000a28:	4a36      	ldr	r2, [pc, #216]	; (8000b04 <getKeyInput+0x174>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a30:	4936      	ldr	r1, [pc, #216]	; (8000b0c <getKeyInput+0x17c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d14f      	bne.n	8000adc <getKeyInput+0x14c>
			if (KeyReg3[i] != KeyReg2[i]){
 8000a3c:	4a35      	ldr	r2, [pc, #212]	; (8000b14 <getKeyInput+0x184>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a44:	4931      	ldr	r1, [pc, #196]	; (8000b0c <getKeyInput+0x17c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d02b      	beq.n	8000aa8 <getKeyInput+0x118>
				KeyReg3[i] = KeyReg2[i];
 8000a50:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <getKeyInput+0x17c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a58:	492e      	ldr	r1, [pc, #184]	; (8000b14 <getKeyInput+0x184>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 8000a60:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <getKeyInput+0x17c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d13d      	bne.n	8000ae8 <getKeyInput+0x158>
					subKeyProcess(i);	// Set timer_flag[i] = 1;
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff7f 	bl	8000970 <subKeyProcess>
					if (long_flag[i] == 0) {
 8000a72:	4a29      	ldr	r2, [pc, #164]	; (8000b18 <getKeyInput+0x188>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10a      	bne.n	8000a94 <getKeyInput+0x104>
						TimeOutForKeyPress[i] = 2000 / TIME_CYCLE;
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <getKeyInput+0x18c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a86:	fb92 f2f3 	sdiv	r2, r2, r3
 8000a8a:	4925      	ldr	r1, [pc, #148]	; (8000b20 <getKeyInput+0x190>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000a92:	e029      	b.n	8000ae8 <getKeyInput+0x158>
					}
					else {
						TimeOutForKeyPress[i] = 250 / TIME_CYCLE;
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <getKeyInput+0x18c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	22fa      	movs	r2, #250	; 0xfa
 8000a9a:	fb92 f2f3 	sdiv	r2, r2, r3
 8000a9e:	4920      	ldr	r1, [pc, #128]	; (8000b20 <getKeyInput+0x190>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000aa6:	e01f      	b.n	8000ae8 <getKeyInput+0x158>
					}
				}
			} else {
				TimeOutForKeyPress[i]--;
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <getKeyInput+0x190>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	1e5a      	subs	r2, r3, #1
 8000ab2:	491b      	ldr	r1, [pc, #108]	; (8000b20 <getKeyInput+0x190>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <getKeyInput+0x190>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d110      	bne.n	8000ae8 <getKeyInput+0x158>
					KeyReg3[i] = NORMAL_STATE;
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <getKeyInput+0x184>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2101      	movs	r1, #1
 8000acc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					long_flag[i] = 1;
 8000ad0:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <getKeyInput+0x188>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000ada:	e005      	b.n	8000ae8 <getKeyInput+0x158>
				}
			}
		}
		else {
			long_flag[i] = 0;
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <getKeyInput+0x188>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ae6:	e000      	b.n	8000aea <getKeyInput+0x15a>
			if (KeyReg3[i] != KeyReg2[i]){
 8000ae8:	bf00      	nop
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3301      	adds	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	f77f af52 	ble.w	800099c <getKeyInput+0xc>
		}
	}
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000000c 	.word	0x2000000c
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000018 	.word	0x20000018
 8000b10:	40010c00 	.word	0x40010c00
 8000b14:	20000024 	.word	0x20000024
 8000b18:	20000088 	.word	0x20000088
 8000b1c:	20000430 	.word	0x20000430
 8000b20:	20000094 	.word	0x20000094

08000b24 <display7SEG>:
 *  Created on: Dec 27, 2023
 *      Author: LENOVO
 */
#include "display7SEG.h"

void display7SEG(int num){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  	char led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <display7SEG+0x5c>)
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b34:	c303      	stmia	r3!, {r0, r1}
 8000b36:	801a      	strh	r2, [r3, #0]
  	for (int i=0; i < 7; i++){
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e018      	b.n	8000b70 <display7SEG+0x4c>
  		HAL_GPIO_WritePin(GPIOB, SEG0_Pin<<i, (led7seg[num]>>i) & 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	b299      	uxth	r1, r3
 8000b48:	f107 0208 	add.w	r2, r7, #8
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa42 f303 	asr.w	r3, r2, r3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	461a      	mov	r2, r3
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <display7SEG+0x60>)
 8000b66:	f001 f9a6 	bl	8001eb6 <HAL_GPIO_WritePin>
  	for (int i=0; i < 7; i++){
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	dde3      	ble.n	8000b3e <display7SEG+0x1a>
  	}
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	08002f10 	.word	0x08002f10
 8000b84:	40010c00 	.word	0x40010c00

08000b88 <update7SEG>:

const int MAX_LED = 6;
int index_led = 0;
int led_buffer[6] = {0, 0, 0, 0, 0, 0};
void update7SEG(int index){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	display7SEG(led_buffer[index]);
 8000b90:	4a81      	ldr	r2, [pc, #516]	; (8000d98 <update7SEG+0x210>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ffc3 	bl	8000b24 <display7SEG>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	f200 80f3 	bhi.w	8000d8c <update7SEG+0x204>
 8000ba6:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <update7SEG+0x24>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000c11 	.word	0x08000c11
 8000bb4:	08000c5d 	.word	0x08000c5d
 8000bb8:	08000ca9 	.word	0x08000ca9
 8000bbc:	08000cf5 	.word	0x08000cf5
 8000bc0:	08000d41 	.word	0x08000d41
	switch(index){
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			index_led = 1;
 8000bc4:	4b75      	ldr	r3, [pc, #468]	; (8000d9c <update7SEG+0x214>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	4874      	ldr	r0, [pc, #464]	; (8000da0 <update7SEG+0x218>)
 8000bd0:	f001 f971 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	4871      	ldr	r0, [pc, #452]	; (8000da0 <update7SEG+0x218>)
 8000bda:	f001 f96c 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	486e      	ldr	r0, [pc, #440]	; (8000da0 <update7SEG+0x218>)
 8000be6:	f001 f966 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf0:	486b      	ldr	r0, [pc, #428]	; (8000da0 <update7SEG+0x218>)
 8000bf2:	f001 f960 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN4_Pin, SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfc:	4868      	ldr	r0, [pc, #416]	; (8000da0 <update7SEG+0x218>)
 8000bfe:	f001 f95a 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN5_Pin, SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c08:	4865      	ldr	r0, [pc, #404]	; (8000da0 <update7SEG+0x218>)
 8000c0a:	f001 f954 	bl	8001eb6 <HAL_GPIO_WritePin>
			break;
 8000c0e:	e0be      	b.n	8000d8e <update7SEG+0x206>
		case 1:
			// Display the second 7 SEG with led_buffer [1]
			index_led = 2;
 8000c10:	4b62      	ldr	r3, [pc, #392]	; (8000d9c <update7SEG+0x214>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2140      	movs	r1, #64	; 0x40
 8000c1a:	4861      	ldr	r0, [pc, #388]	; (8000da0 <update7SEG+0x218>)
 8000c1c:	f001 f94b 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	485e      	ldr	r0, [pc, #376]	; (8000da0 <update7SEG+0x218>)
 8000c26:	f001 f946 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c30:	485b      	ldr	r0, [pc, #364]	; (8000da0 <update7SEG+0x218>)
 8000c32:	f001 f940 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3c:	4858      	ldr	r0, [pc, #352]	; (8000da0 <update7SEG+0x218>)
 8000c3e:	f001 f93a 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN4_Pin, SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c48:	4855      	ldr	r0, [pc, #340]	; (8000da0 <update7SEG+0x218>)
 8000c4a:	f001 f934 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN5_Pin, SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c54:	4852      	ldr	r0, [pc, #328]	; (8000da0 <update7SEG+0x218>)
 8000c56:	f001 f92e 	bl	8001eb6 <HAL_GPIO_WritePin>
			break;
 8000c5a:	e098      	b.n	8000d8e <update7SEG+0x206>
		case 2:
			// Display the third 7 SEG with led_buffer [2]
			index_led = 3;
 8000c5c:	4b4f      	ldr	r3, [pc, #316]	; (8000d9c <update7SEG+0x214>)
 8000c5e:	2203      	movs	r2, #3
 8000c60:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2140      	movs	r1, #64	; 0x40
 8000c66:	484e      	ldr	r0, [pc, #312]	; (8000da0 <update7SEG+0x218>)
 8000c68:	f001 f925 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	484b      	ldr	r0, [pc, #300]	; (8000da0 <update7SEG+0x218>)
 8000c72:	f001 f920 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7c:	4848      	ldr	r0, [pc, #288]	; (8000da0 <update7SEG+0x218>)
 8000c7e:	f001 f91a 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c88:	4845      	ldr	r0, [pc, #276]	; (8000da0 <update7SEG+0x218>)
 8000c8a:	f001 f914 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN4_Pin, SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c94:	4842      	ldr	r0, [pc, #264]	; (8000da0 <update7SEG+0x218>)
 8000c96:	f001 f90e 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN5_Pin, SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca0:	483f      	ldr	r0, [pc, #252]	; (8000da0 <update7SEG+0x218>)
 8000ca2:	f001 f908 	bl	8001eb6 <HAL_GPIO_WritePin>
			break;
 8000ca6:	e072      	b.n	8000d8e <update7SEG+0x206>
		case 3:
			// Display the forth 7 SEG with led_buffer [3]
			index_led = 4;
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	; (8000d9c <update7SEG+0x214>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	483b      	ldr	r0, [pc, #236]	; (8000da0 <update7SEG+0x218>)
 8000cb4:	f001 f8ff 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	4838      	ldr	r0, [pc, #224]	; (8000da0 <update7SEG+0x218>)
 8000cbe:	f001 f8fa 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc8:	4835      	ldr	r0, [pc, #212]	; (8000da0 <update7SEG+0x218>)
 8000cca:	f001 f8f4 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd4:	4832      	ldr	r0, [pc, #200]	; (8000da0 <update7SEG+0x218>)
 8000cd6:	f001 f8ee 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN4_Pin, SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce0:	482f      	ldr	r0, [pc, #188]	; (8000da0 <update7SEG+0x218>)
 8000ce2:	f001 f8e8 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN5_Pin, SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cec:	482c      	ldr	r0, [pc, #176]	; (8000da0 <update7SEG+0x218>)
 8000cee:	f001 f8e2 	bl	8001eb6 <HAL_GPIO_WritePin>
			break;
 8000cf2:	e04c      	b.n	8000d8e <update7SEG+0x206>
		case 4:
			// Display the forth 7 SEG with led_buffer [4]
			index_led = 5;
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <update7SEG+0x214>)
 8000cf6:	2205      	movs	r2, #5
 8000cf8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	4828      	ldr	r0, [pc, #160]	; (8000da0 <update7SEG+0x218>)
 8000d00:	f001 f8d9 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4825      	ldr	r0, [pc, #148]	; (8000da0 <update7SEG+0x218>)
 8000d0a:	f001 f8d4 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d14:	4822      	ldr	r0, [pc, #136]	; (8000da0 <update7SEG+0x218>)
 8000d16:	f001 f8ce 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d20:	481f      	ldr	r0, [pc, #124]	; (8000da0 <update7SEG+0x218>)
 8000d22:	f001 f8c8 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN4_Pin, RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2c:	481c      	ldr	r0, [pc, #112]	; (8000da0 <update7SEG+0x218>)
 8000d2e:	f001 f8c2 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN5_Pin, SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d38:	4819      	ldr	r0, [pc, #100]	; (8000da0 <update7SEG+0x218>)
 8000d3a:	f001 f8bc 	bl	8001eb6 <HAL_GPIO_WritePin>
			break;
 8000d3e:	e026      	b.n	8000d8e <update7SEG+0x206>
		case 5:
			// Display the forth 7 SEG with led_buffer [5]
			index_led = 0;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <update7SEG+0x214>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	4815      	ldr	r0, [pc, #84]	; (8000da0 <update7SEG+0x218>)
 8000d4c:	f001 f8b3 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4812      	ldr	r0, [pc, #72]	; (8000da0 <update7SEG+0x218>)
 8000d56:	f001 f8ae 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d60:	480f      	ldr	r0, [pc, #60]	; (8000da0 <update7SEG+0x218>)
 8000d62:	f001 f8a8 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <update7SEG+0x218>)
 8000d6e:	f001 f8a2 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN4_Pin, SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <update7SEG+0x218>)
 8000d7a:	f001 f89c 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN5_Pin, RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d84:	4806      	ldr	r0, [pc, #24]	; (8000da0 <update7SEG+0x218>)
 8000d86:	f001 f896 	bl	8001eb6 <HAL_GPIO_WritePin>
			break;
 8000d8a:	e000      	b.n	8000d8e <update7SEG+0x206>
		default:
			break;
 8000d8c:	bf00      	nop
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000a4 	.word	0x200000a4
 8000d9c:	200000a0 	.word	0x200000a0
 8000da0:	40010800 	.word	0x40010800

08000da4 <updateLedBufferMode1>:

void updateLedBufferMode1(){
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
	led_buffer[0] = (hour % MAX_HOUR) / 10;
 8000da8:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <updateLedBufferMode1+0xc0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a2e      	ldr	r2, [pc, #184]	; (8000e68 <updateLedBufferMode1+0xc4>)
 8000dae:	6812      	ldr	r2, [r2, #0]
 8000db0:	fb93 f1f2 	sdiv	r1, r3, r2
 8000db4:	fb02 f201 	mul.w	r2, r2, r1
 8000db8:	1a9b      	subs	r3, r3, r2
 8000dba:	4a2c      	ldr	r2, [pc, #176]	; (8000e6c <updateLedBufferMode1+0xc8>)
 8000dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc0:	1092      	asrs	r2, r2, #2
 8000dc2:	17db      	asrs	r3, r3, #31
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	4a2a      	ldr	r2, [pc, #168]	; (8000e70 <updateLedBufferMode1+0xcc>)
 8000dc8:	6013      	str	r3, [r2, #0]
	led_buffer[1] = (hour % MAX_HOUR) % 10;
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <updateLedBufferMode1+0xc0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <updateLedBufferMode1+0xc4>)
 8000dd0:	6812      	ldr	r2, [r2, #0]
 8000dd2:	fb93 f1f2 	sdiv	r1, r3, r2
 8000dd6:	fb02 f201 	mul.w	r2, r2, r1
 8000dda:	1a99      	subs	r1, r3, r2
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <updateLedBufferMode1+0xc8>)
 8000dde:	fb83 2301 	smull	r2, r3, r3, r1
 8000de2:	109a      	asrs	r2, r3, #2
 8000de4:	17cb      	asrs	r3, r1, #31
 8000de6:	1ad2      	subs	r2, r2, r3
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	1aca      	subs	r2, r1, r3
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <updateLedBufferMode1+0xcc>)
 8000df4:	605a      	str	r2, [r3, #4]
	led_buffer[2] = min / 10;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <updateLedBufferMode1+0xd0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <updateLedBufferMode1+0xc8>)
 8000dfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000e00:	1092      	asrs	r2, r2, #2
 8000e02:	17db      	asrs	r3, r3, #31
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <updateLedBufferMode1+0xcc>)
 8000e08:	6093      	str	r3, [r2, #8]
	led_buffer[3] = min % 10;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <updateLedBufferMode1+0xd0>)
 8000e0c:	6819      	ldr	r1, [r3, #0]
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <updateLedBufferMode1+0xc8>)
 8000e10:	fb83 2301 	smull	r2, r3, r3, r1
 8000e14:	109a      	asrs	r2, r3, #2
 8000e16:	17cb      	asrs	r3, r1, #31
 8000e18:	1ad2      	subs	r2, r2, r3
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	1aca      	subs	r2, r1, r3
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <updateLedBufferMode1+0xcc>)
 8000e26:	60da      	str	r2, [r3, #12]
	led_buffer[4] = sec / 10;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <updateLedBufferMode1+0xd4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <updateLedBufferMode1+0xc8>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1092      	asrs	r2, r2, #2
 8000e34:	17db      	asrs	r3, r3, #31
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <updateLedBufferMode1+0xcc>)
 8000e3a:	6113      	str	r3, [r2, #16]
	led_buffer[5] = sec % 10;
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <updateLedBufferMode1+0xd4>)
 8000e3e:	6819      	ldr	r1, [r3, #0]
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <updateLedBufferMode1+0xc8>)
 8000e42:	fb83 2301 	smull	r2, r3, r3, r1
 8000e46:	109a      	asrs	r2, r3, #2
 8000e48:	17cb      	asrs	r3, r1, #31
 8000e4a:	1ad2      	subs	r2, r2, r3
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	1aca      	subs	r2, r1, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <updateLedBufferMode1+0xcc>)
 8000e58:	615a      	str	r2, [r3, #20]
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000030 	.word	0x20000030
 8000e68:	20000050 	.word	0x20000050
 8000e6c:	66666667 	.word	0x66666667
 8000e70:	200000a4 	.word	0x200000a4
 8000e74:	20000034 	.word	0x20000034
 8000e78:	20000038 	.word	0x20000038

08000e7c <updateLedBufferMode2>:

void updateLedBufferMode2(){
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
	led_buffer[0] = day / 10;
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <updateLedBufferMode2+0xac>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a29      	ldr	r2, [pc, #164]	; (8000f2c <updateLedBufferMode2+0xb0>)
 8000e86:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8a:	1092      	asrs	r2, r2, #2
 8000e8c:	17db      	asrs	r3, r3, #31
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <updateLedBufferMode2+0xb4>)
 8000e92:	6013      	str	r3, [r2, #0]
	led_buffer[1] = day % 10;
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <updateLedBufferMode2+0xac>)
 8000e96:	6819      	ldr	r1, [r3, #0]
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <updateLedBufferMode2+0xb0>)
 8000e9a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e9e:	109a      	asrs	r2, r3, #2
 8000ea0:	17cb      	asrs	r3, r1, #31
 8000ea2:	1ad2      	subs	r2, r2, r3
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	1aca      	subs	r2, r1, r3
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <updateLedBufferMode2+0xb4>)
 8000eb0:	605a      	str	r2, [r3, #4]
	led_buffer[2] = month / 10;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <updateLedBufferMode2+0xb8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <updateLedBufferMode2+0xb0>)
 8000eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebc:	1092      	asrs	r2, r2, #2
 8000ebe:	17db      	asrs	r3, r3, #31
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <updateLedBufferMode2+0xb4>)
 8000ec4:	6093      	str	r3, [r2, #8]
	led_buffer[3] = month % 10;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <updateLedBufferMode2+0xb8>)
 8000ec8:	6819      	ldr	r1, [r3, #0]
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <updateLedBufferMode2+0xb0>)
 8000ecc:	fb83 2301 	smull	r2, r3, r3, r1
 8000ed0:	109a      	asrs	r2, r3, #2
 8000ed2:	17cb      	asrs	r3, r1, #31
 8000ed4:	1ad2      	subs	r2, r2, r3
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	1aca      	subs	r2, r1, r3
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <updateLedBufferMode2+0xb4>)
 8000ee2:	60da      	str	r2, [r3, #12]
	led_buffer[4] = (year - 2000) / 10;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <updateLedBufferMode2+0xbc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000eec:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <updateLedBufferMode2+0xb0>)
 8000eee:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef2:	1092      	asrs	r2, r2, #2
 8000ef4:	17db      	asrs	r3, r3, #31
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <updateLedBufferMode2+0xb4>)
 8000efa:	6113      	str	r3, [r2, #16]
	led_buffer[5] = (year - 2000) % 10;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <updateLedBufferMode2+0xbc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f5a3 61fa 	sub.w	r1, r3, #2000	; 0x7d0
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <updateLedBufferMode2+0xb0>)
 8000f06:	fb83 2301 	smull	r2, r3, r3, r1
 8000f0a:	109a      	asrs	r2, r3, #2
 8000f0c:	17cb      	asrs	r3, r1, #31
 8000f0e:	1ad2      	subs	r2, r2, r3
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	1aca      	subs	r2, r1, r3
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <updateLedBufferMode2+0xb4>)
 8000f1c:	615a      	str	r2, [r3, #20]
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000044 	.word	0x20000044
 8000f2c:	66666667 	.word	0x66666667
 8000f30:	200000a4 	.word	0x200000a4
 8000f34:	20000048 	.word	0x20000048
 8000f38:	2000004c 	.word	0x2000004c

08000f3c <blinkydot>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void blinkydot(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8000f40:	2110      	movs	r1, #16
 8000f42:	4802      	ldr	r0, [pc, #8]	; (8000f4c <blinkydot+0x10>)
 8000f44:	f000 ffcf 	bl	8001ee6 <HAL_GPIO_TogglePin>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40010800 	.word	0x40010800

08000f50 <update_time>:

void update_time(){
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	sec+=1;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <update_time+0x60>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <update_time+0x60>)
 8000f5c:	6013      	str	r3, [r2, #0]
	if (sec >= 60){
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <update_time+0x60>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b3b      	cmp	r3, #59	; 0x3b
 8000f64:	dd07      	ble.n	8000f76 <update_time+0x26>
		sec = 0;
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <update_time+0x60>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
		min += 1;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <update_time+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <update_time+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]
	}
	if (min >= 60){
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <update_time+0x64>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f7c:	dd07      	ble.n	8000f8e <update_time+0x3e>
		min = 0;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <update_time+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
		hour += 1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <update_time+0x68>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <update_time+0x68>)
 8000f8c:	6013      	str	r3, [r2, #0]
	}
	if (hour >= 24){
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <update_time+0x68>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b17      	cmp	r3, #23
 8000f94:	dd07      	ble.n	8000fa6 <update_time+0x56>
		hour = 0;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <update_time+0x68>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
		day += 1;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <update_time+0x6c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <update_time+0x6c>)
 8000fa4:	6013      	str	r3, [r2, #0]
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000038 	.word	0x20000038
 8000fb4:	20000034 	.word	0x20000034
 8000fb8:	20000030 	.word	0x20000030
 8000fbc:	20000044 	.word	0x20000044

08000fc0 <alarm>:

void alarm(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	if (hour == hour_alarm && min == min_alarm && sec == sec_alarm){
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <alarm+0x4c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <alarm+0x50>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d110      	bne.n	8000ff2 <alarm+0x32>
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <alarm+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <alarm+0x58>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d10a      	bne.n	8000ff2 <alarm+0x32>
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <alarm+0x5c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <alarm+0x60>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d104      	bne.n	8000ff2 <alarm+0x32>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2120      	movs	r1, #32
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <alarm+0x64>)
 8000fee:	f000 ff62 	bl	8001eb6 <HAL_GPIO_WritePin>
	}
	if (isButtonPressed(2) == 1){
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f7ff fca2 	bl	800093c <isButtonPressed>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d104      	bne.n	8001008 <alarm+0x48>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2120      	movs	r1, #32
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <alarm+0x64>)
 8001004:	f000 ff57 	bl	8001eb6 <HAL_GPIO_WritePin>
	}
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000030 	.word	0x20000030
 8001010:	2000003c 	.word	0x2000003c
 8001014:	20000034 	.word	0x20000034
 8001018:	200000bc 	.word	0x200000bc
 800101c:	20000038 	.word	0x20000038
 8001020:	20000040 	.word	0x20000040
 8001024:	40010800 	.word	0x40010800

08001028 <run>:

void display5s(){
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
}

void run(){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	switch (status){
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <run+0x9c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d83d      	bhi.n	80010b0 <run+0x88>
 8001034:	a201      	add	r2, pc, #4	; (adr r2, 800103c <run+0x14>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	0800104d 	.word	0x0800104d
 8001040:	08001055 	.word	0x08001055
 8001044:	0800106d 	.word	0x0800106d
 8001048:	08001085 	.word	0x08001085
		case INIT:
			status = MODE1;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <run+0x9c>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
			break;
 8001052:	e034      	b.n	80010be <run+0x96>
		case MODE1:
			updateLedBufferMode1();
 8001054:	f7ff fea6 	bl	8000da4 <updateLedBufferMode1>
			if (isButtonPressed(0)) status = MODE2;
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fc6f 	bl	800093c <isButtonPressed>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d027      	beq.n	80010b4 <run+0x8c>
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <run+0x9c>)
 8001066:	2202      	movs	r2, #2
 8001068:	601a      	str	r2, [r3, #0]
			break;
 800106a:	e023      	b.n	80010b4 <run+0x8c>
		case MODE2:
			updateLedBufferMode2();
 800106c:	f7ff ff06 	bl	8000e7c <updateLedBufferMode2>
			if (isButtonPressed(0)) status = MODE3;
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc63 	bl	800093c <isButtonPressed>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01d      	beq.n	80010b8 <run+0x90>
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <run+0x9c>)
 800107e:	2203      	movs	r2, #3
 8001080:	601a      	str	r2, [r3, #0]
			break;
 8001082:	e019      	b.n	80010b8 <run+0x90>
		case MODE3:
			updateLedBufferMode1();
 8001084:	f7ff fe8e 	bl	8000da4 <updateLedBufferMode1>
			if (isButtonPressed(1)) MAX_HOUR = 24;
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fc57 	bl	800093c <isButtonPressed>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <run+0x74>
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <run+0xa0>)
 8001096:	2218      	movs	r2, #24
 8001098:	601a      	str	r2, [r3, #0]
			else if (isButtonPressed(2)) MAX_HOUR = 12;
			break;
 800109a:	e00f      	b.n	80010bc <run+0x94>
			else if (isButtonPressed(2)) MAX_HOUR = 12;
 800109c:	2002      	movs	r0, #2
 800109e:	f7ff fc4d 	bl	800093c <isButtonPressed>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d009      	beq.n	80010bc <run+0x94>
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <run+0xa0>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
			break;
 80010ae:	e005      	b.n	80010bc <run+0x94>
		default:
			break;
 80010b0:	bf00      	nop
 80010b2:	e004      	b.n	80010be <run+0x96>
			break;
 80010b4:	bf00      	nop
 80010b6:	e002      	b.n	80010be <run+0x96>
			break;
 80010b8:	bf00      	nop
 80010ba:	e000      	b.n	80010be <run+0x96>
			break;
 80010bc:	bf00      	nop
	}
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000c0 	.word	0x200000c0
 80010c8:	20000050 	.word	0x20000050

080010cc <scanLED>:

void scanLED(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	update7SEG(index_led);
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <scanLED+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fd57 	bl	8000b88 <update7SEG>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200000a0 	.word	0x200000a0

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e8:	f000 fbe4 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ec:	f000 f83c 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f0:	f000 f902 	bl	80012f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010f4:	f000 f874 	bl	80011e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2);
 80010f8:	4814      	ldr	r0, [pc, #80]	; (800114c <main+0x68>)
 80010fa:	f001 fb39 	bl	8002770 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 80010fe:	f000 f96f 	bl	80013e0 <SCH_Init>

  SCH_Add_Task(blinkydot, 10, 500);
 8001102:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001106:	210a      	movs	r1, #10
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <main+0x6c>)
 800110a:	f000 fa2d 	bl	8001568 <SCH_Add_Task>
  SCH_Add_Task(update_time, 0, 1200);
 800110e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001112:	2100      	movs	r1, #0
 8001114:	480f      	ldr	r0, [pc, #60]	; (8001154 <main+0x70>)
 8001116:	f000 fa27 	bl	8001568 <SCH_Add_Task>
  SCH_Add_Task(scanLED, 0, 200);
 800111a:	22c8      	movs	r2, #200	; 0xc8
 800111c:	2100      	movs	r1, #0
 800111e:	480e      	ldr	r0, [pc, #56]	; (8001158 <main+0x74>)
 8001120:	f000 fa22 	bl	8001568 <SCH_Add_Task>
  SCH_Add_Task(run, 0, 10);
 8001124:	220a      	movs	r2, #10
 8001126:	2100      	movs	r1, #0
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <main+0x78>)
 800112a:	f000 fa1d 	bl	8001568 <SCH_Add_Task>
  SCH_Add_Task(alarm, 10, 1200);
 800112e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001132:	210a      	movs	r1, #10
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <main+0x7c>)
 8001136:	f000 fa17 	bl	8001568 <SCH_Add_Task>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	2120      	movs	r1, #32
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <main+0x80>)
 8001140:	f000 feb9 	bl	8001eb6 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 8001144:	f000 f9bc 	bl	80014c0 <SCH_Dispatch_Tasks>
 8001148:	e7fc      	b.n	8001144 <main+0x60>
 800114a:	bf00      	nop
 800114c:	200000c8 	.word	0x200000c8
 8001150:	08000f3d 	.word	0x08000f3d
 8001154:	08000f51 	.word	0x08000f51
 8001158:	080010cd 	.word	0x080010cd
 800115c:	08001029 	.word	0x08001029
 8001160:	08000fc1 	.word	0x08000fc1
 8001164:	40010800 	.word	0x40010800

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b090      	sub	sp, #64	; 0x40
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	2228      	movs	r2, #40	; 0x28
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f001 feb6 	bl	8002ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118e:	2301      	movs	r3, #1
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001192:	2310      	movs	r3, #16
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0318 	add.w	r3, r7, #24
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 feba 	bl	8001f18 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011aa:	f000 f913 	bl	80013d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 f926 	bl	8002418 <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011d2:	f000 f8ff 	bl	80013d4 <Error_Handler>
  }
}
 80011d6:	bf00      	nop
 80011d8:	3740      	adds	r7, #64	; 0x40
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <MX_TIM2_Init+0x108>)
 80011fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001202:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001204:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <MX_TIM2_Init+0x108>)
 8001206:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800120a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <MX_TIM2_Init+0x108>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001212:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <MX_TIM2_Init+0x108>)
 8001214:	2209      	movs	r2, #9
 8001216:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <MX_TIM2_Init+0x108>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <MX_TIM2_Init+0x108>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001224:	4830      	ldr	r0, [pc, #192]	; (80012e8 <MX_TIM2_Init+0x108>)
 8001226:	f001 fa53 	bl	80026d0 <HAL_TIM_Base_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001230:	f000 f8d0 	bl	80013d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4619      	mov	r1, r3
 8001240:	4829      	ldr	r0, [pc, #164]	; (80012e8 <MX_TIM2_Init+0x108>)
 8001242:	f001 fbe9 	bl	8002a18 <HAL_TIM_ConfigClockSource>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800124c:	f000 f8c2 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	4822      	ldr	r0, [pc, #136]	; (80012e8 <MX_TIM2_Init+0x108>)
 800125e:	f001 fdb5 	bl	8002dcc <HAL_TIMEx_MasterConfigSynchronization>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001268:	f000 f8b4 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIME_CYCLE = 1/(8e6/(htim2.Init.Prescaler + 1)/(htim2.Init.Period + 1)) * 1000; // Time cycle
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_TIM2_Init+0x108>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	3301      	adds	r3, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f8ae 	bl	80003d4 <__aeabi_ui2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	a118      	add	r1, pc, #96	; (adr r1, 80012e0 <MX_TIM2_Init+0x100>)
 800127e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001282:	f7ff fa4b 	bl	800071c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4614      	mov	r4, r2
 800128c:	461d      	mov	r5, r3
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_TIM2_Init+0x108>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	3301      	adds	r3, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f89d 	bl	80003d4 <__aeabi_ui2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4620      	mov	r0, r4
 80012a0:	4629      	mov	r1, r5
 80012a2:	f7ff fa3b 	bl	800071c <__aeabi_ddiv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	f04f 0000 	mov.w	r0, #0
 80012ae:	490f      	ldr	r1, [pc, #60]	; (80012ec <MX_TIM2_Init+0x10c>)
 80012b0:	f7ff fa34 	bl	800071c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_TIM2_Init+0x110>)
 80012c2:	f7ff f901 	bl	80004c8 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fb0d 	bl	80008ec <__aeabi_d2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <MX_TIM2_Init+0x114>)
 80012d6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bdb0      	pop	{r4, r5, r7, pc}
 80012e0:	00000000 	.word	0x00000000
 80012e4:	415e8480 	.word	0x415e8480
 80012e8:	200000c8 	.word	0x200000c8
 80012ec:	3ff00000 	.word	0x3ff00000
 80012f0:	408f4000 	.word	0x408f4000
 80012f4:	20000430 	.word	0x20000430

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <MX_GPIO_Init+0xb8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <MX_GPIO_Init+0xb8>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <MX_GPIO_Init+0xb8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <MX_GPIO_Init+0xb8>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <MX_GPIO_Init+0xb8>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_GPIO_Init+0xb8>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DOT_Pin|LED_RED_Pin|EN0_Pin|EN1_Pin
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 8001342:	481c      	ldr	r0, [pc, #112]	; (80013b4 <MX_GPIO_Init+0xbc>)
 8001344:	f000 fdb7 	bl	8001eb6 <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001348:	2200      	movs	r2, #0
 800134a:	217f      	movs	r1, #127	; 0x7f
 800134c:	481a      	ldr	r0, [pc, #104]	; (80013b8 <MX_GPIO_Init+0xc0>)
 800134e:	f000 fdb2 	bl	8001eb6 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DOT_Pin LED_RED_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin EN5_Pin */
  GPIO_InitStruct.Pin = DOT_Pin|LED_RED_Pin|EN0_Pin|EN1_Pin
 8001352:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8001356:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2302      	movs	r3, #2
 8001362:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4619      	mov	r1, r3
 800136a:	4812      	ldr	r0, [pc, #72]	; (80013b4 <MX_GPIO_Init+0xbc>)
 800136c:	f000 fc12 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001370:	237f      	movs	r3, #127	; 0x7f
 8001372:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2302      	movs	r3, #2
 800137e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4619      	mov	r1, r3
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_GPIO_Init+0xc0>)
 8001388:	f000 fc04 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800138c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_GPIO_Init+0xc0>)
 80013a2:	f000 fbf7 	bl	8001b94 <HAL_GPIO_Init>

}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010800 	.word	0x40010800
 80013b8:	40010c00 	.word	0x40010c00

080013bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80013c4:	f000 f81c 	bl	8001400 <SCH_Update>
	getKeyInput();
 80013c8:	f7ff fae2 	bl	8000990 <getKeyInput>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>
	...

080013e0 <SCH_Init>:
int TIME_CYCLE; // Time cycle

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	while (current_index_task != 0) {
 80013e4:	e002      	b.n	80013ec <SCH_Init+0xc>
		SCH_Delete_Task(0);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f92e 	bl	8001648 <SCH_Delete_Task>
	while (current_index_task != 0) {
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <SCH_Init+0x1c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f8      	bne.n	80013e6 <SCH_Init+0x6>
	}
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000c4 	.word	0x200000c4

08001400 <SCH_Update>:
void SCH_Update(void){
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++) {
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	e048      	b.n	800149e <SCH_Update+0x9e>
		if(SCH_tasks_G[i].Delay > 0) {
 800140c:	492a      	ldr	r1, [pc, #168]	; (80014b8 <SCH_Update+0xb8>)
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	3304      	adds	r3, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d013      	beq.n	800144a <SCH_Update+0x4a>
			// Decrement the delay
			SCH_tasks_G[i].Delay--;
 8001422:	4925      	ldr	r1, [pc, #148]	; (80014b8 <SCH_Update+0xb8>)
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3304      	adds	r3, #4
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	1e59      	subs	r1, r3, #1
 8001436:	4820      	ldr	r0, [pc, #128]	; (80014b8 <SCH_Update+0xb8>)
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4403      	add	r3, r0
 8001444:	3304      	adds	r3, #4
 8001446:	6019      	str	r1, [r3, #0]
 8001448:	e026      	b.n	8001498 <SCH_Update+0x98>
		}
		else {
			// Schedule periodic tasks to run again
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 800144a:	491b      	ldr	r1, [pc, #108]	; (80014b8 <SCH_Update+0xb8>)
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	3308      	adds	r3, #8
 800145a:	6819      	ldr	r1, [r3, #0]
 800145c:	4816      	ldr	r0, [pc, #88]	; (80014b8 <SCH_Update+0xb8>)
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4403      	add	r3, r0
 800146a:	3304      	adds	r3, #4
 800146c:	6019      	str	r1, [r3, #0]
			//Inc. the ’RunMe’ flag
			SCH_tasks_G[i].RunMe += 1;
 800146e:	4912      	ldr	r1, [pc, #72]	; (80014b8 <SCH_Update+0xb8>)
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	330c      	adds	r3, #12
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <SCH_Update+0xb8>)
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	330c      	adds	r3, #12
 8001494:	4602      	mov	r2, r0
 8001496:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3301      	adds	r3, #1
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <SCH_Update+0xbc>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	dbb0      	blt.n	800140c <SCH_Update+0xc>
		}
	}
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000110 	.word	0x20000110
 80014bc:	200000c4 	.word	0x200000c4

080014c0 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	e03d      	b.n	8001548 <SCH_Dispatch_Tasks+0x88>
		if(SCH_tasks_G[i].RunMe > 0) {
 80014cc:	4924      	ldr	r1, [pc, #144]	; (8001560 <SCH_Dispatch_Tasks+0xa0>)
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	330c      	adds	r3, #12
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d02f      	beq.n	8001542 <SCH_Dispatch_Tasks+0x82>
			SCH_tasks_G[i].RunMe--;		// Reset / reduce RunMe flag
 80014e2:	491f      	ldr	r1, [pc, #124]	; (8001560 <SCH_Dispatch_Tasks+0xa0>)
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	330c      	adds	r3, #12
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	4919      	ldr	r1, [pc, #100]	; (8001560 <SCH_Dispatch_Tasks+0xa0>)
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	330c      	adds	r3, #12
 8001508:	4602      	mov	r2, r0
 800150a:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();	// Run the task
 800150c:	4914      	ldr	r1, [pc, #80]	; (8001560 <SCH_Dispatch_Tasks+0xa0>)
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4798      	blx	r3
			// Periodic tasks will automatically run again
			// If this is a "one shot" task, remove it from the array
			if (SCH_tasks_G[i].Period == 0) {
 800151e:	4910      	ldr	r1, [pc, #64]	; (8001560 <SCH_Dispatch_Tasks+0xa0>)
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	3308      	adds	r3, #8
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d106      	bne.n	8001542 <SCH_Dispatch_Tasks+0x82>
				SCH_Delete_Task(i);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f886 	bl	8001648 <SCH_Delete_Task>
				i--;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < current_index_task; i++) {
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3301      	adds	r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SCH_Dispatch_Tasks+0xa4>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4293      	cmp	r3, r2
 8001552:	dbbb      	blt.n	80014cc <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000110 	.word	0x20000110
 8001564:	200000c4 	.word	0x200000c4

08001568 <SCH_Add_Task>:
uint32_t SCH_Add_Task (void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <SCH_Add_Task+0xd4>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b27      	cmp	r3, #39	; 0x27
 800157a:	d858      	bhi.n	800162e <SCH_Add_Task+0xc6>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <SCH_Add_Task+0xd4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	4a2f      	ldr	r2, [pc, #188]	; (8001640 <SCH_Add_Task+0xd8>)
 8001584:	460b      	mov	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY/TIME_CYCLE;
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <SCH_Add_Task+0xdc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <SCH_Add_Task+0xd4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80015a4:	4926      	ldr	r1, [pc, #152]	; (8001640 <SCH_Add_Task+0xd8>)
 80015a6:	4603      	mov	r3, r0
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4403      	add	r3, r0
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3304      	adds	r3, #4
 80015b2:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD/TIME_CYCLE;
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <SCH_Add_Task+0xdc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <SCH_Add_Task+0xd4>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80015c6:	491e      	ldr	r1, [pc, #120]	; (8001640 <SCH_Add_Task+0xd8>)
 80015c8:	4603      	mov	r3, r0
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4403      	add	r3, r0
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3308      	adds	r3, #8
 80015d4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <SCH_Add_Task+0xd4>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	4a18      	ldr	r2, [pc, #96]	; (8001640 <SCH_Add_Task+0xd8>)
 80015de:	460b      	mov	r3, r1
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	330c      	adds	r3, #12
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
		// Add to the end of array
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <SCH_Add_Task+0xd4>)
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <SCH_Add_Task+0xd4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	4610      	mov	r0, r2
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <SCH_Add_Task+0xd8>)
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3310      	adds	r3, #16
 8001608:	6018      	str	r0, [r3, #0]
		// Update current_index_task
		current_index_task++;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <SCH_Add_Task+0xd4>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <SCH_Add_Task+0xd4>)
 8001614:	701a      	strb	r2, [r3, #0]
		return SCH_tasks_G[current_index_task].TaskID;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <SCH_Add_Task+0xd4>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	4a08      	ldr	r2, [pc, #32]	; (8001640 <SCH_Add_Task+0xd8>)
 800161e:	460b      	mov	r3, r1
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	3310      	adds	r3, #16
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	e001      	b.n	8001632 <SCH_Add_Task+0xca>
	}
	return -1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	200000c4 	.word	0x200000c4
 8001640:	20000110 	.word	0x20000110
 8001644:	20000430 	.word	0x20000430

08001648 <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(uint32_t taskID){
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	// If no task in array or taskID not exist, return -1
	if (current_index_task == 0 || taskID < 0 || taskID >= SCH_MAX_TASKS) {
 8001650:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <SCH_Delete_Task+0xfc>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <SCH_Delete_Task+0x16>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b27      	cmp	r3, #39	; 0x27
 800165c:	d901      	bls.n	8001662 <SCH_Delete_Task+0x1a>
		return -1;
 800165e:	23ff      	movs	r3, #255	; 0xff
 8001660:	e06b      	b.n	800173a <SCH_Delete_Task+0xf2>
	}
	for (int i = taskID; i < SCH_MAX_TASKS-1; i++) {
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e04d      	b.n	8001704 <SCH_Delete_Task+0xbc>
		// Move task from index i+1 -> i
		SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	4936      	ldr	r1, [pc, #216]	; (8001748 <SCH_Delete_Task+0x100>)
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	4833      	ldr	r0, [pc, #204]	; (8001748 <SCH_Delete_Task+0x100>)
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4403      	add	r3, r0
 8001688:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Delay = SCH_tasks_G[i+1].Delay;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	492e      	ldr	r1, [pc, #184]	; (8001748 <SCH_Delete_Task+0x100>)
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3304      	adds	r3, #4
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	482a      	ldr	r0, [pc, #168]	; (8001748 <SCH_Delete_Task+0x100>)
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4403      	add	r3, r0
 80016ac:	3304      	adds	r3, #4
 80016ae:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	4924      	ldr	r1, [pc, #144]	; (8001748 <SCH_Delete_Task+0x100>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	3308      	adds	r3, #8
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	4820      	ldr	r0, [pc, #128]	; (8001748 <SCH_Delete_Task+0x100>)
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4403      	add	r3, r0
 80016d2:	3308      	adds	r3, #8
 80016d4:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].RunMe = SCH_tasks_G[i+1].RunMe;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	491b      	ldr	r1, [pc, #108]	; (8001748 <SCH_Delete_Task+0x100>)
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	330c      	adds	r3, #12
 80016e8:	7818      	ldrb	r0, [r3, #0]
 80016ea:	4917      	ldr	r1, [pc, #92]	; (8001748 <SCH_Delete_Task+0x100>)
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	330c      	adds	r3, #12
 80016fa:	4602      	mov	r2, r0
 80016fc:	701a      	strb	r2, [r3, #0]
	for (int i = taskID; i < SCH_MAX_TASKS-1; i++) {
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b26      	cmp	r3, #38	; 0x26
 8001708:	ddae      	ble.n	8001668 <SCH_Delete_Task+0x20>
	}
	// Reset SCH_tasks_G[SCH_MAX_TASKS-1]
	SCH_tasks_G[SCH_MAX_TASKS-1].pTask = 0x0000;
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <SCH_Delete_Task+0x100>)
 800170c:	2200      	movs	r2, #0
 800170e:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	SCH_tasks_G[SCH_MAX_TASKS-1].Delay = 0;
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <SCH_Delete_Task+0x100>)
 8001714:	2200      	movs	r2, #0
 8001716:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	SCH_tasks_G[SCH_MAX_TASKS-1].Period = 0;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <SCH_Delete_Task+0x100>)
 800171c:	2200      	movs	r2, #0
 800171e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
	SCH_tasks_G[SCH_MAX_TASKS-1].RunMe = 0;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <SCH_Delete_Task+0x100>)
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
	current_index_task--;
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <SCH_Delete_Task+0xfc>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	3b01      	subs	r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SCH_Delete_Task+0xfc>)
 8001734:	701a      	strb	r2, [r3, #0]
	return taskID;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	b2db      	uxtb	r3, r3
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	200000c4 	.word	0x200000c4
 8001748:	20000110 	.word	0x20000110

0800174c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_MspInit+0x5c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <HAL_MspInit+0x5c>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6193      	str	r3, [r2, #24]
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_MspInit+0x5c>)
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <HAL_MspInit+0x5c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <HAL_MspInit+0x5c>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_MspInit+0x60>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_MspInit+0x60>)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c0:	d113      	bne.n	80017ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_TIM_Base_MspInit+0x44>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_TIM_Base_MspInit+0x44>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_TIM_Base_MspInit+0x44>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	201c      	movs	r0, #28
 80017e0:	f000 f9a1 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017e4:	201c      	movs	r0, #28
 80017e6:	f000 f9ba 	bl	8001b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <NMI_Handler+0x4>

080017fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <MemManage_Handler+0x4>

0800180a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <UsageFault_Handler+0x4>

08001816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183e:	f000 f87f 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <TIM2_IRQHandler+0x10>)
 800184e:	f000 ffdb 	bl	8002808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200000c8 	.word	0x200000c8

0800185c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001868:	f7ff fff8 	bl	800185c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800186e:	490c      	ldr	r1, [pc, #48]	; (80018a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001870:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e002      	b.n	800187c <LoopCopyDataInit>

08001876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187a:	3304      	adds	r3, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001880:	d3f9      	bcc.n	8001876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001884:	4c09      	ldr	r4, [pc, #36]	; (80018ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001888:	e001      	b.n	800188e <LoopFillZerobss>

0800188a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188c:	3204      	adds	r2, #4

0800188e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001890:	d3fb      	bcc.n	800188a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001892:	f001 fb05 	bl	8002ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001896:	f7ff fc25 	bl	80010e4 <main>
  bx lr
 800189a:	4770      	bx	lr
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80018a4:	08002f48 	.word	0x08002f48
  ldr r2, =_sbss
 80018a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80018ac:	20000438 	.word	0x20000438

080018b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC1_2_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_Init+0x28>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_Init+0x28>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f923 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	200f      	movs	r0, #15
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff ff3c 	bl	800174c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40022000 	.word	0x40022000

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f93b 	bl	8001b7a <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f000 f903 	bl	8001b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000054 	.word	0x20000054
 8001938:	2000005c 	.word	0x2000005c
 800193c:	20000058 	.word	0x20000058

08001940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_IncTick+0x1c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_IncTick+0x20>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a03      	ldr	r2, [pc, #12]	; (8001960 <HAL_IncTick+0x20>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	2000005c 	.word	0x2000005c
 8001960:	20000434 	.word	0x20000434

08001964 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b02      	ldr	r3, [pc, #8]	; (8001974 <HAL_GetTick+0x10>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000434 	.word	0x20000434

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4906      	ldr	r1, [pc, #24]	; (8001a10 <__NVIC_EnableIRQ+0x34>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff90 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff2d 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff42 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff90 	bl	8001a68 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5f 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff35 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa2 	bl	8001acc <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b08b      	sub	sp, #44	; 0x2c
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba6:	e148      	b.n	8001e3a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8137 	bne.w	8001e34 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4aa3      	ldr	r2, [pc, #652]	; (8001e58 <HAL_GPIO_Init+0x2c4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d05e      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bd0:	4aa1      	ldr	r2, [pc, #644]	; (8001e58 <HAL_GPIO_Init+0x2c4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d875      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bd6:	4aa1      	ldr	r2, [pc, #644]	; (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d058      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bdc:	4a9f      	ldr	r2, [pc, #636]	; (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d86f      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001be2:	4a9f      	ldr	r2, [pc, #636]	; (8001e60 <HAL_GPIO_Init+0x2cc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d052      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001be8:	4a9d      	ldr	r2, [pc, #628]	; (8001e60 <HAL_GPIO_Init+0x2cc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d869      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bee:	4a9d      	ldr	r2, [pc, #628]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d04c      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bf4:	4a9b      	ldr	r2, [pc, #620]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d863      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bfa:	4a9b      	ldr	r2, [pc, #620]	; (8001e68 <HAL_GPIO_Init+0x2d4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d046      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001c00:	4a99      	ldr	r2, [pc, #612]	; (8001e68 <HAL_GPIO_Init+0x2d4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d85d      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d82a      	bhi.n	8001c60 <HAL_GPIO_Init+0xcc>
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d859      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <HAL_GPIO_Init+0x80>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c8f 	.word	0x08001c8f
 8001c18:	08001c69 	.word	0x08001c69
 8001c1c:	08001c7b 	.word	0x08001c7b
 8001c20:	08001cbd 	.word	0x08001cbd
 8001c24:	08001cc3 	.word	0x08001cc3
 8001c28:	08001cc3 	.word	0x08001cc3
 8001c2c:	08001cc3 	.word	0x08001cc3
 8001c30:	08001cc3 	.word	0x08001cc3
 8001c34:	08001cc3 	.word	0x08001cc3
 8001c38:	08001cc3 	.word	0x08001cc3
 8001c3c:	08001cc3 	.word	0x08001cc3
 8001c40:	08001cc3 	.word	0x08001cc3
 8001c44:	08001cc3 	.word	0x08001cc3
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001cc3 	.word	0x08001cc3
 8001c50:	08001cc3 	.word	0x08001cc3
 8001c54:	08001cc3 	.word	0x08001cc3
 8001c58:	08001c71 	.word	0x08001c71
 8001c5c:	08001c85 	.word	0x08001c85
 8001c60:	4a82      	ldr	r2, [pc, #520]	; (8001e6c <HAL_GPIO_Init+0x2d8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c66:	e02c      	b.n	8001cc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e029      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	3304      	adds	r3, #4
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e024      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	3308      	adds	r3, #8
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e01f      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e01a      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c96:	2304      	movs	r3, #4
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e013      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	611a      	str	r2, [r3, #16]
          break;
 8001cae:	e009      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	615a      	str	r2, [r3, #20]
          break;
 8001cba:	e003      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          break;
 8001cc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d801      	bhi.n	8001cce <HAL_GPIO_Init+0x13a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	e001      	b.n	8001cd2 <HAL_GPIO_Init+0x13e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	d802      	bhi.n	8001ce0 <HAL_GPIO_Init+0x14c>
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x152>
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	3b08      	subs	r3, #8
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	210f      	movs	r1, #15
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	431a      	orrs	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8090 	beq.w	8001e34 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d14:	4b56      	ldr	r3, [pc, #344]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a55      	ldr	r2, [pc, #340]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d2c:	4a51      	ldr	r2, [pc, #324]	; (8001e74 <HAL_GPIO_Init+0x2e0>)
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a49      	ldr	r2, [pc, #292]	; (8001e78 <HAL_GPIO_Init+0x2e4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00d      	beq.n	8001d74 <HAL_GPIO_Init+0x1e0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a48      	ldr	r2, [pc, #288]	; (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <HAL_GPIO_Init+0x1dc>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a47      	ldr	r2, [pc, #284]	; (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_GPIO_Init+0x1d8>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e004      	b.n	8001d76 <HAL_GPIO_Init+0x1e2>
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e002      	b.n	8001d76 <HAL_GPIO_Init+0x1e2>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_GPIO_Init+0x1e2>
 8001d74:	2300      	movs	r3, #0
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	f002 0203 	and.w	r2, r2, #3
 8001d7c:	0092      	lsls	r2, r2, #2
 8001d7e:	4093      	lsls	r3, r2
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d86:	493b      	ldr	r1, [pc, #236]	; (8001e74 <HAL_GPIO_Init+0x2e0>)
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001da0:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	4937      	ldr	r1, [pc, #220]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dae:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4933      	ldr	r1, [pc, #204]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	492d      	ldr	r1, [pc, #180]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4929      	ldr	r1, [pc, #164]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4923      	ldr	r1, [pc, #140]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	491f      	ldr	r1, [pc, #124]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4919      	ldr	r1, [pc, #100]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4915      	ldr	r1, [pc, #84]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3301      	adds	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f47f aeaf 	bne.w	8001ba8 <HAL_GPIO_Init+0x14>
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	372c      	adds	r7, #44	; 0x2c
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	10320000 	.word	0x10320000
 8001e5c:	10310000 	.word	0x10310000
 8001e60:	10220000 	.word	0x10220000
 8001e64:	10210000 	.word	0x10210000
 8001e68:	10120000 	.word	0x10120000
 8001e6c:	10110000 	.word	0x10110000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40010800 	.word	0x40010800
 8001e7c:	40010c00 	.word	0x40010c00
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40010400 	.word	0x40010400

08001e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e001      	b.n	8001eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	807b      	strh	r3, [r7, #2]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec6:	787b      	ldrb	r3, [r7, #1]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ecc:	887a      	ldrh	r2, [r7, #2]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ed2:	e003      	b.n	8001edc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	041a      	lsls	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	611a      	str	r2, [r3, #16]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef8:	887a      	ldrh	r2, [r7, #2]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	041a      	lsls	r2, r3, #16
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	400b      	ands	r3, r1
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e26c      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8087 	beq.w	8002046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f38:	4b92      	ldr	r3, [pc, #584]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d00c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f44:	4b8f      	ldr	r3, [pc, #572]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d112      	bne.n	8001f76 <HAL_RCC_OscConfig+0x5e>
 8001f50:	4b8c      	ldr	r3, [pc, #560]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5c:	d10b      	bne.n	8001f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5e:	4b89      	ldr	r3, [pc, #548]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d06c      	beq.n	8002044 <HAL_RCC_OscConfig+0x12c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d168      	bne.n	8002044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e246      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x76>
 8001f80:	4b80      	ldr	r3, [pc, #512]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a7f      	ldr	r2, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e02e      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x98>
 8001f96:	4b7b      	ldr	r3, [pc, #492]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7a      	ldr	r2, [pc, #488]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b78      	ldr	r3, [pc, #480]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a77      	ldr	r2, [pc, #476]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e01d      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xbc>
 8001fba:	4b72      	ldr	r3, [pc, #456]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a71      	ldr	r2, [pc, #452]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6e      	ldr	r2, [pc, #440]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001fd4:	4b6b      	ldr	r3, [pc, #428]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b68      	ldr	r3, [pc, #416]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a67      	ldr	r2, [pc, #412]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fcb6 	bl	8001964 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff fcb2 	bl	8001964 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e1fa      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0xe4>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fca2 	bl	8001964 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fc9e 	bl	8001964 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1e6      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x10c>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d063      	beq.n	800211a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002052:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800205e:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b08      	cmp	r3, #8
 8002068:	d11c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x18c>
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x176>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e1ba      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4939      	ldr	r1, [pc, #228]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	e03a      	b.n	800211a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_RCC_OscConfig+0x270>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fc57 	bl	8001964 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ba:	f7ff fc53 	bl	8001964 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e19b      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4927      	ldr	r1, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_RCC_OscConfig+0x270>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fc36 	bl	8001964 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fc:	f7ff fc32 	bl	8001964 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e17a      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d03a      	beq.n	800219c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d019      	beq.n	8002162 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7ff fc16 	bl	8001964 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7ff fc12 	bl	8001964 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e15a      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800215a:	2001      	movs	r0, #1
 800215c:	f000 fa9a 	bl	8002694 <RCC_Delay>
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7ff fbfc 	bl	8001964 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216e:	e00f      	b.n	8002190 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002170:	f7ff fbf8 	bl	8001964 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d908      	bls.n	8002190 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e140      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	42420000 	.word	0x42420000
 800218c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002190:	4b9e      	ldr	r3, [pc, #632]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e9      	bne.n	8002170 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a6 	beq.w	80022f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ae:	4b97      	ldr	r3, [pc, #604]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b94      	ldr	r3, [pc, #592]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a93      	ldr	r2, [pc, #588]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b91      	ldr	r3, [pc, #580]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b8e      	ldr	r3, [pc, #568]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d118      	bne.n	8002214 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a8a      	ldr	r2, [pc, #552]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7ff fbb9 	bl	8001964 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7ff fbb5 	bl	8001964 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b64      	cmp	r3, #100	; 0x64
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0fd      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x312>
 800221c:	4b7b      	ldr	r3, [pc, #492]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a7a      	ldr	r2, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	e02d      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x334>
 8002232:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a75      	ldr	r2, [pc, #468]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	4b73      	ldr	r3, [pc, #460]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a72      	ldr	r2, [pc, #456]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	e01c      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0x356>
 8002254:	4b6d      	ldr	r3, [pc, #436]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a6c      	ldr	r2, [pc, #432]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a69      	ldr	r2, [pc, #420]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6213      	str	r3, [r2, #32]
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800226e:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a66      	ldr	r2, [pc, #408]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	4b64      	ldr	r3, [pc, #400]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4a63      	ldr	r2, [pc, #396]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d015      	beq.n	80022ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7ff fb69 	bl	8001964 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7ff fb65 	bl	8001964 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0ab      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	4b57      	ldr	r3, [pc, #348]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ee      	beq.n	8002296 <HAL_RCC_OscConfig+0x37e>
 80022b8:	e014      	b.n	80022e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ba:	f7ff fb53 	bl	8001964 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7ff fb4f 	bl	8001964 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e095      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	4b4c      	ldr	r3, [pc, #304]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ee      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b48      	ldr	r3, [pc, #288]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a47      	ldr	r2, [pc, #284]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8081 	beq.w	8002402 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d061      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d146      	bne.n	80023a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x4fc>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff fb23 	bl	8001964 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff fb1f 	bl	8001964 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e067      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d108      	bne.n	800235c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	492d      	ldr	r1, [pc, #180]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a19      	ldr	r1, [r3, #32]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	430b      	orrs	r3, r1
 800236e:	4927      	ldr	r1, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_RCC_OscConfig+0x4fc>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff faf3 	bl	8001964 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7ff faef 	bl	8001964 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e037      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x46a>
 80023a0:	e02f      	b.n	8002402 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_RCC_OscConfig+0x4fc>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fadc 	bl	8001964 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff fad8 	bl	8001964 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e020      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x498>
 80023ce:	e018      	b.n	8002402 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e013      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	42420060 	.word	0x42420060

08002418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0d0      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4965      	ldr	r1, [pc, #404]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800247e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a52      	ldr	r2, [pc, #328]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	494d      	ldr	r1, [pc, #308]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d040      	beq.n	8002538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e073      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e06b      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4936      	ldr	r1, [pc, #216]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002508:	f7ff fa2c 	bl	8001964 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7ff fa28 	bl	8001964 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e053      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d210      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0207 	bic.w	r2, r3, #7
 800254e:	4922      	ldr	r1, [pc, #136]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e032      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4916      	ldr	r1, [pc, #88]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490e      	ldr	r1, [pc, #56]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f821 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490a      	ldr	r1, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1cc>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1d0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff f98a 	bl	80018e0 <HAL_InitTick>

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08002f1c 	.word	0x08002f1c
 80025e4:	20000054 	.word	0x20000054
 80025e8:	20000058 	.word	0x20000058

080025ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_RCC_GetSysClockFreq+0x94>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x30>
 8002616:	2b08      	cmp	r3, #8
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x36>
 800261a:	e027      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800261e:	613b      	str	r3, [r7, #16]
      break;
 8002620:	e027      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	0c9b      	lsrs	r3, r3, #18
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	4a17      	ldr	r2, [pc, #92]	; (8002688 <HAL_RCC_GetSysClockFreq+0x9c>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d010      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_GetSysClockFreq+0x94>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0c5b      	lsrs	r3, r3, #17
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800264e:	fb02 f203 	mul.w	r2, r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e004      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	613b      	str	r3, [r7, #16]
      break;
 800266a:	e002      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002672:	693b      	ldr	r3, [r7, #16]
}
 8002674:	4618      	mov	r0, r3
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	007a1200 	.word	0x007a1200
 8002688:	08002f2c 	.word	0x08002f2c
 800268c:	08002f3c 	.word	0x08002f3c
 8002690:	003d0900 	.word	0x003d0900

08002694 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <RCC_Delay+0x34>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <RCC_Delay+0x38>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	0a5b      	lsrs	r3, r3, #9
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026b0:	bf00      	nop
  }
  while (Delay --);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	60fa      	str	r2, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f9      	bne.n	80026b0 <RCC_Delay+0x1c>
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	20000054 	.word	0x20000054
 80026cc:	10624dd3 	.word	0x10624dd3

080026d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e041      	b.n	8002766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff f85a 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f000 fa6e 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d001      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e035      	b.n	80027f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a16      	ldr	r2, [pc, #88]	; (8002800 <HAL_TIM_Base_Start_IT+0x90>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_TIM_Base_Start_IT+0x4e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b2:	d004      	beq.n	80027be <HAL_TIM_Base_Start_IT+0x4e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_TIM_Base_Start_IT+0x94>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d111      	bne.n	80027e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d010      	beq.n	80027f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e0:	e007      	b.n	80027f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40000400 	.word	0x40000400

08002808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b02      	cmp	r3, #2
 800281c:	d122      	bne.n	8002864 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b02      	cmp	r3, #2
 800282a:	d11b      	bne.n	8002864 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0202 	mvn.w	r2, #2
 8002834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f9b4 	bl	8002bb8 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f9a7 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f9b6 	bl	8002bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b04      	cmp	r3, #4
 8002870:	d122      	bne.n	80028b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d11b      	bne.n	80028b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0204 	mvn.w	r2, #4
 8002888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f98a 	bl	8002bb8 <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f97d 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f98c 	bl	8002bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d122      	bne.n	800290c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d11b      	bne.n	800290c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0208 	mvn.w	r2, #8
 80028dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f960 	bl	8002bb8 <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f953 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f962 	bl	8002bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b10      	cmp	r3, #16
 8002918:	d122      	bne.n	8002960 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b10      	cmp	r3, #16
 8002926:	d11b      	bne.n	8002960 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0210 	mvn.w	r2, #16
 8002930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2208      	movs	r2, #8
 8002936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f936 	bl	8002bb8 <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f929 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f938 	bl	8002bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10e      	bne.n	800298c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0201 	mvn.w	r2, #1
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fd18 	bl	80013bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b80      	cmp	r3, #128	; 0x80
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d107      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa6b 	bl	8002e8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b40      	cmp	r3, #64	; 0x40
 80029c4:	d10e      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	d107      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8fc 	bl	8002bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d10e      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d107      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0220 	mvn.w	r2, #32
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fa36 	bl	8002e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_TIM_ConfigClockSource+0x1c>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0b4      	b.n	8002b9e <HAL_TIM_ConfigClockSource+0x186>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6c:	d03e      	beq.n	8002aec <HAL_TIM_ConfigClockSource+0xd4>
 8002a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a72:	f200 8087 	bhi.w	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7a:	f000 8086 	beq.w	8002b8a <HAL_TIM_ConfigClockSource+0x172>
 8002a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a82:	d87f      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a84:	2b70      	cmp	r3, #112	; 0x70
 8002a86:	d01a      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0xa6>
 8002a88:	2b70      	cmp	r3, #112	; 0x70
 8002a8a:	d87b      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a8c:	2b60      	cmp	r3, #96	; 0x60
 8002a8e:	d050      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x11a>
 8002a90:	2b60      	cmp	r3, #96	; 0x60
 8002a92:	d877      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a94:	2b50      	cmp	r3, #80	; 0x50
 8002a96:	d03c      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0xfa>
 8002a98:	2b50      	cmp	r3, #80	; 0x50
 8002a9a:	d873      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a9c:	2b40      	cmp	r3, #64	; 0x40
 8002a9e:	d058      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x13a>
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d86f      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa4:	2b30      	cmp	r3, #48	; 0x30
 8002aa6:	d064      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x15a>
 8002aa8:	2b30      	cmp	r3, #48	; 0x30
 8002aaa:	d86b      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d060      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d867      	bhi.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d05c      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	d05a      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x15a>
 8002abc:	e062      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6899      	ldr	r1, [r3, #8]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f000 f95e 	bl	8002d8e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ae0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	609a      	str	r2, [r3, #8]
      break;
 8002aea:	e04f      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f000 f947 	bl	8002d8e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b0e:	609a      	str	r2, [r3, #8]
      break;
 8002b10:	e03c      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f000 f8be 	bl	8002ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2150      	movs	r1, #80	; 0x50
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f915 	bl	8002d5a <TIM_ITRx_SetConfig>
      break;
 8002b30:	e02c      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6859      	ldr	r1, [r3, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f000 f8dc 	bl	8002cfc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2160      	movs	r1, #96	; 0x60
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f905 	bl	8002d5a <TIM_ITRx_SetConfig>
      break;
 8002b50:	e01c      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f000 f89e 	bl	8002ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2140      	movs	r1, #64	; 0x40
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f8f5 	bl	8002d5a <TIM_ITRx_SetConfig>
      break;
 8002b70:	e00c      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	f000 f8ec 	bl	8002d5a <TIM_ITRx_SetConfig>
      break;
 8002b82:	e003      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      break;
 8002b88:	e000      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
	...

08002bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <TIM_Base_SetConfig+0xa8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <TIM_Base_SetConfig+0x28>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d003      	beq.n	8002c18 <TIM_Base_SetConfig+0x28>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <TIM_Base_SetConfig+0xac>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d108      	bne.n	8002c2a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <TIM_Base_SetConfig+0xa8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <TIM_Base_SetConfig+0x52>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d003      	beq.n	8002c42 <TIM_Base_SetConfig+0x52>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <TIM_Base_SetConfig+0xac>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <TIM_Base_SetConfig+0xa8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d103      	bne.n	8002c88 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	615a      	str	r2, [r3, #20]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400

08002ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f023 0201 	bic.w	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f023 030a 	bic.w	r3, r3, #10
 8002cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	621a      	str	r2, [r3, #32]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f023 0210 	bic.w	r2, r3, #16
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	031b      	lsls	r3, r3, #12
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	621a      	str	r2, [r3, #32]
}
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f043 0307 	orr.w	r3, r3, #7
 8002d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	609a      	str	r2, [r3, #8]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002da8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	021a      	lsls	r2, r3, #8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	609a      	str	r2, [r3, #8]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e041      	b.n	8002e68 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d004      	beq.n	8002e3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a10      	ldr	r2, [pc, #64]	; (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10c      	bne.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40012c00 	.word	0x40012c00
 8002e78:	40000400 	.word	0x40000400

08002e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <__libc_init_array>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	2600      	movs	r6, #0
 8002ea4:	4d0c      	ldr	r5, [pc, #48]	; (8002ed8 <__libc_init_array+0x38>)
 8002ea6:	4c0d      	ldr	r4, [pc, #52]	; (8002edc <__libc_init_array+0x3c>)
 8002ea8:	1b64      	subs	r4, r4, r5
 8002eaa:	10a4      	asrs	r4, r4, #2
 8002eac:	42a6      	cmp	r6, r4
 8002eae:	d109      	bne.n	8002ec4 <__libc_init_array+0x24>
 8002eb0:	f000 f822 	bl	8002ef8 <_init>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	4d0a      	ldr	r5, [pc, #40]	; (8002ee0 <__libc_init_array+0x40>)
 8002eb8:	4c0a      	ldr	r4, [pc, #40]	; (8002ee4 <__libc_init_array+0x44>)
 8002eba:	1b64      	subs	r4, r4, r5
 8002ebc:	10a4      	asrs	r4, r4, #2
 8002ebe:	42a6      	cmp	r6, r4
 8002ec0:	d105      	bne.n	8002ece <__libc_init_array+0x2e>
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec8:	4798      	blx	r3
 8002eca:	3601      	adds	r6, #1
 8002ecc:	e7ee      	b.n	8002eac <__libc_init_array+0xc>
 8002ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed2:	4798      	blx	r3
 8002ed4:	3601      	adds	r6, #1
 8002ed6:	e7f2      	b.n	8002ebe <__libc_init_array+0x1e>
 8002ed8:	08002f40 	.word	0x08002f40
 8002edc:	08002f40 	.word	0x08002f40
 8002ee0:	08002f40 	.word	0x08002f40
 8002ee4:	08002f44 	.word	0x08002f44

08002ee8 <memset>:
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4402      	add	r2, r0
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d100      	bne.n	8002ef2 <memset+0xa>
 8002ef0:	4770      	bx	lr
 8002ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef6:	e7f9      	b.n	8002eec <memset+0x4>

08002ef8 <_init>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	bf00      	nop
 8002efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efe:	bc08      	pop	{r3}
 8002f00:	469e      	mov	lr, r3
 8002f02:	4770      	bx	lr

08002f04 <_fini>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	bf00      	nop
 8002f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0a:	bc08      	pop	{r3}
 8002f0c:	469e      	mov	lr, r3
 8002f0e:	4770      	bx	lr
